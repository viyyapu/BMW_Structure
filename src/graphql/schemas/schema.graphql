type Project{
    projectId: String,
    title: String,
    description: String,
    owner: String,
    date: String,
    endDate: String,
    timeline: String,
    noOfFte: Int,
    fteAllocation: String,
    status: String,
    fundingDepartment: String,
    fteRequired: Int,
    estimatedBudget: Float,
    actualBudget: Float
}

input InputProject{
    projectId: String,
    title: String,
    description: String,
    owner: String,
    date: String,
    endDate: String,
    timeline: String,
    noOfFte: Int,
    fteAllocation: String,
    status: String
    budget: budgetInformation
}

input budgetInformation {
    fundingDepartment: String,
    fteRequired: Int,
    estimatedBudget: Float,
    actualBudget: Float
}

type projectData {
status: Status,
data: Project
}

type Mutation {
   addProject(input: InputProject): projectData
}

type Mutation {
  updateProject(id: String, input: InputProject!): projectData
}

type Mutation {
  deleteProject(id: String): deleteProjectsData
}

type  deleteProjectsData{
 status: Status
}

type Query {
  getProjects: getProjectsData
}

type getProjectsData {
status:Status
data:[Project]
}







type Resource{
    empId: Int,
    firstName: String,
    lastName: String,
    department: String,
    organization: String,
    availability: Int,
    groupTeam: String,
    allocation: Int,
    startDate: String,
    endDate: String,
    role: String
}
input InputResource{
    empId: Int,
    firstName: String,
    lastName: String,
    department: String,
    organization: String,
    availability: Int,
    groupTeam: String,
    allocation: Int,
    startDate: String,
    endDate: String,
    role: String
}
type resourceData {
status: Status,
data: Resource
}
type Mutation {
   addResource(input: InputResource): resourceData
}

type Mutation {
  updateResource(id: String, input: InputResource!): resourceData
}

type Mutation {
  deleteResource(id: String): deleteResourcesData
}

type  deleteResourcesData{
 status: Status
}

type Query {
  getResources: getResourcesData
}

type getResourcesData {
status:Status
data:[Resource]
}







type User {
  email: String
  name: String
  provider: String
  photoUrl: String
  contactType:String
  phone:String
}
input InputUser {
  email: String
  name: String
  provider: String
  photoUrl: String
  contactType:String
  phone:String
}
type Mutation {
  addUser(input: InputUser!): userData
}
type userData {
  status: Status,
  data:User
}

type Mutation {
  updateUser(id: String, input: InputUser!): userData
}

type Mutation {
  deleteUser(id: String): deleteUsersData
}

type  deleteUsersData{
 status:Status
}

type Query {
  getUsers(contactType:String): getUsersData
}

type getUsersData {
status:Status
data:[User]
}

type Status {
  code :Int ,
  header: String,
  description : String,
  moreInfo :String
}








input InputMetaData{
    outputArtifact: String,
    accountingDetails: String,
    swProcessStep: String,
    spGeneration: String,
    ecu: String,
    productDomainGroup: String,
    productDomain: String,
    product: String,
    areaProduct: String
}

type Mutation {
  addMetaData(input: InputMetaData!): metaData
}

type metaData {
  status: Status,
  data:metaDataList
}

type Query {
  getMetaData: metaDataList
}

type metaDataList {
status:Status
data:metaDataArray
}

type metaDataArray{
  outputArtifact: [String],
  accountingDetails: [String],
  swProcessStep: [String],
  spGeneration: [String],
  ecu: [String],
  productDomainGroup: [String],
  productDomain: [String],
  product: [String],
  areaProduct: [String]
    
}

type metaDataList{
    outputArtifact: String,
    accountingDetails: String,
    swProcessStep: String,
    spGeneration: String,
    ecu: String,
    productDomainGroup: String,
    productDomain: String,
    product: String,
    areaProduct: String    
}





type Query {
  findByUserId(id: String!): findByUserIdData
}

type findByUserIdData{
  status:Status
  data:User
}

type Query {
  token(email: String!): String!
}
